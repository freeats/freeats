- ats_title(t("rodauth.create_account_page_title"))
.authentication-container.mx-auto.card
  .card-body.p-4
    h1.mb-4
      = t("rodauth.create_account_page_title")
    = form_with url: rodauth.create_account_path,
                method: :post,
                id: "form-with-recaptcha",
                data: { controller: "recaptcha-v3" }
      #turbo_recaptcha.position-absolute
      = render(TextInputComponent.new( \
          "full_name",
          placeholder: true,
          required: true,
          autofocus: true,
          value: params["full_name"],
          class: ("is-invalid" if rodauth.field_error("full_name")) \
        ))
      span.invalid-feedback
        = rodauth.field_error("full_name")

      = render(TextInputComponent.new( \
          "company_name",
          placeholder: true,
          required: true,
          value: params["company_name"],
          class: "mt-3 #{'is-invalid' if rodauth.field_error('company_name')}" \
        ))
      span.invalid-feedback
        = rodauth.field_error("company_name")

      = render(TextInputComponent.new( \
          rodauth.login_param,
          placeholder: t("rodauth.login_input_placeholder"),
          type: :email,
          autocomplete: "email",
          required: true,
          value: params[rodauth.login_param],
          class: "mt-3 #{'is-invalid' if rodauth.field_error(rodauth.login_param)}" \
        ))
      span.invalid-feedback
        = rodauth.field_error(rodauth.login_param)

      = render(TextInputComponent.new( \
          rodauth.password_param,
          placeholder: t("rodauth.password_input_placeholder"),
          type: :password,
          autocomplete: rodauth.password_field_autocomplete_value,
          required: true,
          class: "mt-3 #{'is-invalid' if rodauth.field_error(rodauth.password_param)}" \
        ))
      span.invalid-feedback
        = rodauth.field_error(rodauth.password_param)

      = render(TextInputComponent.new( \
          rodauth.password_confirm_param,
          placeholder: t("rodauth.confirm_password_input_placeholder"),
          type: :password,
          required: true,
          class: "mt-3 #{'is-invalid' if rodauth.field_error(rodauth.password_confirm_param)}" \
        ))
      span.invalid-feedback
        = rodauth.field_error(rodauth.password_confirm_param)

      = hidden_field_tag :recaptcha_v3_score, nil, data: { recaptcha_v3_target: "score" }

      .d-flex.mt-4
        = render(ButtonComponent.new(class: "col"))
          = t("rodauth.create_account_button")
    .mt-2
      => t("rodauth.create_account_page_text_before_sign_in_link")
      a href=rodauth.login_path
        = t("rodauth.email_auth_page_title")
    .mt-3.font-small.text-gray-600 = t("recaptcha.privacy_message_html")
