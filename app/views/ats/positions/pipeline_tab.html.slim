ruby:
  status_labels = {}
  mobile_status_labels = {}

/ DESKTOP
- status_labels["qualified"] = capture
  | Qualified
  span
    span.badge.status-counter#turbo_position_pipeline_qualified_status_counter
      = @qualified_count
- status_labels["reserved"] = capture
  | Reserved
  span
    span.badge.status-counter#turbo_position_pipeline_reserved_status_counter
        = @reserved_count
- status_labels["disqualified"] = capture
  | Disqualified
  span
    span.badge.status-counter#turbo_position_pipeline_disqualified_status_counter
      = @disqualified_count
/ MOBILE
- mobile_status_labels["qualified"] = capture
  | Qualified
  span
    span.badge.status-counter#turbo_position_pipeline_qualified_mobile_status_counter
      = @qualified_count
- mobile_status_labels["reserved"] = capture
  | Reserved
  span
    span.badge.status-counter#turbo_position_pipeline_reserved_mobile_status_counter
      = @reserved_count
- mobile_status_labels["disqualified"] = capture
  | Disqualified
  span
    span.badge.status-counter#turbo_position_pipeline_disqualified_mobile_status_counter
      = @disqualified_count

= render "ats/positions/profile"
  #pipeline-placements.mt-3
    / STATUS NAVIGATION
    .row.align-items-center.row-gap-3
      .col-12.col-sm-auto
        / DESKTOP
        .btn-group.shadow-none.d-none.d-sm-block aria-label="Candidate status" role="group"
          = render ButtonLinkComponent.new( \
                     tab_ats_position_path( \
                       @position.id,
                       :pipeline,
                       assigned_only: params[:assigned_only],
                     ),
                     variant: :cancel,
                     class: ("active" if params[:pipeline_tab].blank?),
                   )
            = status_labels["qualified"]
          = render ButtonLinkComponent.new( \
                     tab_ats_position_path( \
                       @position.id,
                       :pipeline,
                       pipeline_tab: :reserved,
                       assigned_only: params[:assigned_only],
                     ),
                     variant: :cancel,
                     class: ("active" if params[:pipeline_tab] == "reserved"),
                   )
            = status_labels["reserved"]
          = render ButtonLinkComponent.new( \
                     tab_ats_position_path( \
                       @position.id,
                       :pipeline,
                       pipeline_tab: :disqualified,
                       assigned_only: params[:assigned_only],
                     ),
                     variant: :cancel,
                     class: ("active" if params[:pipeline_tab] == "disqualified"),
                   )
            = status_labels["disqualified"]
        / MOBILE
        = render ButtonComponent.new( \
                   variant: :cancel,
                   class: "d-sm-none dropdown-toggle",
                   type: :button,
                   aria: { expanded: false, haspopup: true },
                   data: { bs_toggle: :dropdown },
                 )
          = status_labels[params[:pipeline_tab] || "qualified"]
        ul.dropdown-menu
          li
            = render ButtonLinkComponent.new( \
                       tab_ats_position_path( \
                         @position.id,
                         :pipeline,
                         assigned_only: params[:assigned_only],
                       ),
                       variant: :custom,
                       flex_content_position: :start,
                       class: "dropdown-item",
                     )
              = mobile_status_labels["qualified"]
          li
            = render ButtonLinkComponent.new( \
                       tab_ats_position_path( \
                         @position.id,
                         :pipeline,
                         pipeline_tab: :reserved,
                         assigned_only: params[:assigned_only],
                       ),
                       variant: :custom,
                       flex_content_position: :start,
                       class: "dropdown-item",
                     )
              = mobile_status_labels["reserved"]
          li
            = render ButtonLinkComponent.new( \
                       tab_ats_position_path( \
                         @position.id,
                         :pipeline,
                         pipeline_tab: :disqualified,
                         assigned_only: params[:assigned_only],
                       ),
                       variant: :custom,
                       flex_content_position: :start,
                       class: "dropdown-item",
                     )
              = mobile_status_labels["disqualified"]

      - if allowed_to?(:assign_only?)
        .col-sm-auto.ms-auto
          = form_tag tab_ats_position_path(@position.id, :pipeline), method: :get, class: "form-check mb-0"
            - if params[:pipeline_tab]
              = hidden_field_tag :pipeline_tab, params[:pipeline_tab]
            = check_box_tag :assigned_only, "true", params[:assigned_only], class: "form-check-input"
            = label_tag :assigned_only, "Assigned only", class: "form-check-label"

    /! MOBILE ONLY STAGE NAVIGATION
    #pipeline-mobile-stage-nav.d-sm-none.nav.nav-pills.d-flex.justify-content-between.mt-3.mb-2 role="tablist"
      .d-sm-none.dropdown.w-100.profile-mobile-nav data-controller="pipeline-column"
        button.btn.form-control.d-flex.align-items-center.text-dark.dropdown-toggle.w-100.px-3 [
            id="dropdownNavLink" data-bs-toggle="dropdown"]
          span.hstack.gap-2 data-pipeline-column-target="dropdownPlaceholder"
              => @stages.first
              span.badge class="turbo_position_pipeline_#{@stages.first}_stage_counter"
                = @grouped_placements[@stages.first][:count]
        ul.dropdown-menu.w-100
          - @stages.each_with_index do |stage, index|
            li = link_to "#nav-#{stage}", id: "nav-#{stage}-tab", role: "tab",
                         class: "dropdown-item hstack gap-2 py-2 #{'active' if index.zero?}",
                         aria: { controls: "nav-#{stage}", selected: ("#{index.zero? ? 'true' : 'false'}") },
                         data: { \
                           bs_toggle: "tab",
                           action: "click->pipeline-column#mobileStageDropdownPlaceholder",
                         }
                 => stage
                 span.badge class="turbo_position_pipeline_#{stage}_stage_counter"
                   = @grouped_placements[stage][:count]

    #pipeline-body.mt-3
      .scroll-sm.pipeline-body-column
        .tab-content.d-flex.gap-sm-3
          - @stages.each_with_index do |stage, index|
            ruby:
              # rubocop:disable Lint/UselessAssignment
              column_status = @grouped_placements[stage][:count] < @placement_limit ? "noMore" : "probablyMore"
              # rubocop:enable Lint/UselessAssignment
            .tab-pane.fade.d-sm-block.show-sm.w-100.p-sm-2.mb-sm-1.pipeline-column [
              aria-labelledby="#{stage}-tab"
              class="#{index.zero? ? 'show active' : ''}"
              data-controller="pipeline-column"
              data-pipeline-column-card-limit=@placement_limit
              data-pipeline-column-endpoint=ats_position_fetch_pipeline_placements_path(@position)
              data-pipeline-column-stage=stage
              data-pipeline-column-status=column_status
              id="nav-#{stage}"
              role="tabpanel"]
              .d-none.d-sm-block.pipeline-stage-header.mb-2
                .row
                  .col
                    = link_to stage,
                              ats_candidates_path( \
                                ats_candidates_grid: { \
                                  position: @position,
                                  recruiter: params[:assigned_only] ? current_member : "",
                                  stage: [stage],
                                  status: params[:pipeline_tab] || "qualified",
                                  order: :last_activity,
                                },
                              )
                    span.badge.pipeline-stage-counter.ms-2 [
                      class="turbo_position_pipeline_#{stage}_stage_counter"]
                      = @grouped_placements[stage][:count]
              .column-scroll-sm [data-action="scroll->pipeline-column#loadMore"
                data-pipeline-column-target="scrollColumnWrapper"]
                div data-pipeline-column-target="column" id="#{stage}-stage-placements"
                  div id="turbo_#{stage}_stage_placements"
                    = render collection: @grouped_placements[stage][:placements],
                            partial: "ats/placements/placement_pipeline_card"
